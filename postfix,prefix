

#include<stdio.h>  
#include<stdlib.h>
#include<ctype.h>  
#include<string.h>  
#define SIZE 100      
int top=-1;            
char  stack[SIZE];    
void push(char  item)  
{                      
    if(top>=SIZE-1)    
    {                  
        printf("stack over flow\n");      
        }                
        else{            
            top++;        
            stack[top]=item;  
            }              
            }              
char pop()      
            {char item;    
            if(top<0)    
            {        
                printf("stack underflow\n");      

                exit(1);                
                }        
                else{    
                    item=stack[top];
                    top--;        
                    return item;
                }      
                }    
int is_operator(char op)  
                {  
                    if(op=='%' || op=='^' ||  op=='*' || op=='/' || op=='+' ||  op=='-')        
                    {                      
                        return 1;          
                        }                  
                        else                
                        {                  
                            return 0;      
                            }              
                            }              
int precedence(char op)  
                            {      
                                if(op=='^' || op=='%')
                                {          
                                    return 3;
                                    }          
                                    else if(op=='*' || op=='/')
                                    {            
                                        return 2;    
                                        }            
                                        else if(op=='+' || op=='-')  
                                        {            
                                            return 1;
                                            }    
                                            else {
                                                 return 0;  
                                                 }  
                                                 }  
                                                 
void infixtopostfix(char infix[],char postfix[])  
{                                            
    int i=0,j=0;                              
    char x,item;                              
    push('(');                          
    strcat(infix,")");                  
    item=infix[i];                      
    while(item!='\0')                    
    {                                    
        if(item=='(')        
        {                  
            push(item);      
            }                
            else if(isdigit(item) || isalpha(item))  
            {    
                postfix[j]=item;
                j++;          
                }      
                else if(is_operator(item)==1)  
                {        
                    x=pop();  
                    while(is_operator(x)==1 && precedence(x)>=precedence(item))
                    {      
                        postfix[j]=x;    
                        j++;        
                        x=pop();    
                    }  
                    push(x);  
                    push(item);
                    }          
                    else if(item==')')  
                    {      
                        x=pop();
                        while(x!='(')
                        {      
                            postfix[j]=x;
                            j++;      
                            x=pop();  
                            }    
                            }    
                            else{    
                                printf("enter crt expression\n");
                                exit(1);  
                                }        
                                i++;    
                                item=infix[i];
                                }        
                                    postfix[j]='\0';
}

void reverse(char infix[],char t[])  
{            
    int p=0,q=0;
    while(infix[p]!='\0')  
    {              
        p++;        
        }              
        p--;          
    while(p>=0)  
        {if(infix[p]==')')  
        {                
            t[q]='(';
            p--;
            q++;
           
            }          
            else if(infix[p]=='(')    
            {                
                t[q]=')';
                p--;
                q++;
                }        
                else      
                {        
                    t[q]=infix[p];    
                    p--;
                    q++;
                    }          
                    }        
                    t[q++]='\0';      
                    }        
int main()  
{    int choice=0;    
     char infix[SIZE],postfix[SIZE],t[SIZE],prefix[SIZE];
    printf("enter infix expression\n");
    gets(infix);
    while(choice<3)
    {printf("enter \n1-infix to postfix\n2-infix to prefix\n");
    printf("entre u r choice\n");
    scanf("%d",&choice);
    switch(choice)
{case 1:

    infixtopostfix(infix,postfix);
    printf("infix expression is: (");  
    puts(infix);                
    printf("postfix expression is: ");  
    puts(postfix);      
break;
case 2:
     reverse(infix,t);            
     infixtopostfix(t,postfix);  
     reverse(postfix,prefix);    
     printf("infix expression is: ");  
     puts(infix);                      
     printf("prefix expression is:");  
     puts(prefix);      
     break;
case 3:
     printf("exit");
     break;
}
}
}   
